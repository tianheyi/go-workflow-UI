{"remainingRequest":"D:\\GoProject\\quickStart\\goworkflow\\go-workflow-UI\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\GoProject\\quickStart\\goworkflow\\go-workflow-UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GoProject\\quickStart\\goworkflow\\go-workflow-UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GoProject\\quickStart\\goworkflow\\go-workflow-UI\\src\\components\\Generator\\add-node-approver.vue?vue&type=template&id=8f3bd870&","dependencies":[{"path":"D:\\GoProject\\quickStart\\goworkflow\\go-workflow-UI\\src\\components\\Generator\\add-node-approver.vue","mtime":1695484426153},{"path":"D:\\GoProject\\quickStart\\goworkflow\\go-workflow-UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GoProject\\quickStart\\goworkflow\\go-workflow-UI\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\GoProject\\quickStart\\goworkflow\\go-workflow-UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GoProject\\quickStart\\goworkflow\\go-workflow-UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}